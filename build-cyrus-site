#!/usr/bin/env perl

use v5.36.0;

=head1 NAME

build-cyrus-site - rebuild the cyrusimap.org website

=head1 DESCRIPTION

Rebuilds the cyrusimap.org website (aka cyrusimap.github.io) from the RST
documentation in our various repositories and branches

=head1 SYNOPSIS

build-cyrus-site [options]

    Options:
    --publish   publish updates to upstream repository
    --help      show usage

=head1 OPTIONS

=over 4

=item B<--help>

Prints the usage information and exits.

=back

=cut

use File::Path qw(make_path);
use File::Spec::Functions;
use Getopt::Long::Descriptive;
use Pod::Usage;

my ($opt, $usage) = describe_options(
    '%c %o',
    [ 'help',     'display help and exit' ],
    [ 'only-dev', 'only build the dev version, and make it the root' ],
);

pod2usage(0) if $opt->help;

# A semi-persistent working directory
# (It's okay if this directory disappears, it will be remade automatically,
# but it's better if it doesn't disappear, so we don't have to do all these
# git clones every time)
my $basedir = '/tmp/CYRUS_DOCS_BUILD_DIR';

my $builddir = canonpath("$basedir/cyrus-site");

sub cyrus_branch ($branch, $paths = undef) {
    return (
        $branch => {
            repo   => 'https://github.com/cyrusimap/cyrus-imapd.git',
            branch => $branch,
            paths  => $paths // [ "/" . ($branch =~ s{^cyrus-imapd-}{}r) ]
        },
    );
}

# The sources that various parts of the website will be built from, referred
# to by webpaths below
# If no branch name is set, the source name will be used as the branch name
my $sources = {
    'cyrus-sasl' => {
        repo    => 'https://github.com/cyrusimap/cyrus-sasl.git',
        branch  => 'master',
        paths   => [ '/sasl' ],
    },
    cyrus_branch('master', [ '/dev' ]),
    cyrus_branch('cyrus-imapd-2.5'),
    cyrus_branch('cyrus-imapd-3.0'),
    cyrus_branch('cyrus-imapd-3.2'),
    cyrus_branch('cyrus-imapd-3.4'),
    cyrus_branch('cyrus-imapd-3.6'),
    cyrus_branch('cyrus-imapd-3.8'),
    cyrus_branch('cyrus-imapd-3.10', [ '/3.10', '/', '/stable' ]),
    cyrus_branch('cyrus-imapd-3.12'),
};

if ($opt->only_dev) {
    $sources = { cyrus_branch('master', [ '/' ]) };
}

sub run_or_die ($cmd, @args) {
    print "===> running $cmd @args\n";
    system $cmd $cmd, @args;
    return if $? == 0;

    if ($? == -1) {
        die "could not execute '$cmd': $!\n";
    } elsif ($? & 127) {
        my $msg = sprintf "'$cmd' died with signal %d, %s coredump\n",
                          ($? & 127),  ($? & 128) ? 'with' : 'without';
        die $msg;
    } else {
        my $msg = sprintf "'$cmd' exited with value %d\n",
                          $? >> 8;
        die $msg;
    }
}

sub run_and_ignore_nonzero ($cmd, @args) {
    print "===> running $cmd @args\n";
    system $cmd $cmd, @args;
    return if $? == 0;

    if ($? == -1) {
        die "could not execute '$cmd': $!\n";
    } elsif ($? & 127) {
        my $msg = sprintf "'$cmd' died with signal %d, %s coredump\n",
                          ($? & 127),  ($? & 128) ? 'with' : 'without';
        die $msg;
    } else {
        # nonzero exit value, ignore it
        return;
    }
}

# set up PATH
$ENV{PATH} = join(q{:}, qw( /usr/local/bin /usr/bin /bin ));
print "#### \$PATH is \"$ENV{PATH}\"\n";

# set up our basedir
make_path($basedir);
chdir $basedir or die "chdir $basedir: $!\n";

# pull the target
if (-d $builddir) {
    print "#### we already have a build directory, cool...\n";
} else {
    print "#### creating a build dir...\n";
    make_path($builddir);
}

# build the docs from each source
foreach my $source (sort keys %{$sources}) {
    my $details = $sources->{$source};
    my $dir = canonpath("$basedir/$source");
    my $branch = $details->{branch} || $source;

    # first make sure we have the source tree
    if (! -d $dir) {
        print "#### cloning repo for $source...\n";
        run_or_die('git', 'clone', $details->{repo},
                   '--branch', $branch,
                   '--single-branch',
                   '--no-tags',
                   $dir);
    } else {
        print "#### updating repo for $source...\n";
        run_or_die('git', '-C', $dir,
                   'fetch', 'origin');
    }

    print "#### building docs for $source...\n";
    run_or_die('git', '-C', $dir,
               'checkout', '-q', "origin/$branch");
    run_or_die('make', '-C', canonpath("$dir/docsrc"), 'html');

    for my $path ($details->{paths}->@*) {
        print "#### rsyncing $source docs to $path...\n";
        my $src = canonpath("$basedir/$source/docsrc/build/html");
        my $dest = canonpath("$builddir/$path");

        # n.b. trailing / on src argument is load-bearing
        run_or_die('rsync', '-av', "$src/", $dest);
    }
}

print "#### all done!\n";
